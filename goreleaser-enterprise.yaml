variables:
  main: ""
  binary_name: ""
  description: ""
  ghcr_io_registry_owner: charmbracelet

before:
  hooks:
    - go mod tidy

builds:
  - binary: "{{ with .Var.binary_name }}{{ . }}{{ else }}{{ .ProjectName }}{{ end }}"
    env:
      - CGO_ENABLED=0
    main: "{{ with .Var.main }}{{ . }}{{ else }}.{{ end }}"
    ldflags: -s -w -X main.Version=v{{ .Version }} -X main.CommitSHA={{ .Commit }} -X main.CommitDate={{ .CommitDate }}
    goos:
      - linux
    goarch:
      - amd64

checksum:
  name_template: "checksums.txt"

source:
  enabled: true

sboms:
  - artifacts: archive
  - id: source
    artifacts: source

snapshot:
  name_template: "{{ incpatch .Version }}-snapshot"

nightly:
  name_template: "{{ incpatch .Version }}-devel"

signs:
  - cmd: cosign
    certificate: "${artifact}.pem"
    args:
      - sign-blob
      - "--output-certificate=${certificate}"
      - "--output-signature=${signature}"
      - "${artifact}"
      - "--yes"
    artifacts: checksum
    output: true

dockers:
  - image_templates:
      - "ghcr.io/{{ .Var.ghcr_io_registry_owner }}/{{ .ProjectName }}:v{{ .Version }}-amd64"
    goarch: amd64
    build_flag_templates:
      - --platform=linux/amd64
      - --label=org.opencontainers.image.title={{ .ProjectName }}
      - --label=org.opencontainers.image.description={{ .Var.description }}
      - --label=org.opencontainers.image.source={{ .GitURL }}
      - --label=org.opencontainers.image.version=v{{ .Version }}
      - --label=org.opencontainers.image.created={{ .Date }}
      - --label=org.opencontainers.image.revision={{ .FullCommit }}
      - --label=org.opencontainers.image.licenses=MIT
    dockerfile: Dockerfile
    use: buildx

docker_manifests:
  - name_template: "{{ if not .IsNightly }}ghcr.io/{{ .Var.ghcr_io_registry_owner }}/{{ .ProjectName }}:latest{{ end }}"
    image_templates:
      - "ghcr.io/{{ .Var.ghcr_io_registry_owner }}/{{ .ProjectName }}:v{{ .Version }}-amd64"
  - name_template: "{{ if not .IsNightly }}ghcr.io/{{ .Var.ghcr_io_registry_owner }}/{{ .ProjectName }}:v{{ .Major }}.{{ .Minor }}{{ end }}"
    image_templates:
      - "ghcr.io/{{ .Var.ghcr_io_registry_owner }}/{{ .ProjectName }}:v{{ .Version }}-amd64"
  - name_template: "ghcr.io/{{ .Var.ghcr_io_registry_owner }}/{{ .ProjectName }}:v{{ .Version }}"
    image_templates:
      - "ghcr.io/{{ .Var.ghcr_io_registry_owner }}/{{ .ProjectName }}:v{{ .Version }}-amd64"
  - name_template: "ghcr.io/{{ .Var.ghcr_io_registry_owner }}/{{ .ProjectName }}:{{ .Commit }}{{ if .IsNightly }}-devel{{ end }}"
    image_templates:
      - "ghcr.io/{{ .Var.ghcr_io_registry_owner }}/{{ .ProjectName }}:v{{ .Version }}-amd64"
  - name_template: "{{ if .IsNightly }}ghcr.io/{{ .Var.ghcr_io_registry_owner }}/{{ .ProjectName }}:nightly{{ end }}"
    image_templates:
      - "ghcr.io/{{ .Var.ghcr_io_registry_owner }}/{{ .ProjectName }}:v{{ .Version }}-amd64"

docker_signs:
  - cmd: cosign
    artifacts: manifests
    output: true
    args:
      - "sign"
      - "${artifact}"
      - "--yes"

release:
  footer: |
    * * *

    <details>
    <summary>Verifying the artifacts</summary>

    First, download the [`checksums.txt` file](https://github.com/charmbracelet/{{.ProjectName}}/releases/download/{{.Version}}/checksums.txt), for example, with `wget`:

    ```bash
    wget 'https://github.com/charmbracelet/{{.ProjectName}}/releases/download/{{.Version}}/checksums.txt'
    ```

    Then, verify it using [`cosign`](https://github.com/sigstore/cosign):

    ```bash
    cosign verify-blob \
      --certificate-identity 'https://github.com/charmbracelet/meta/.github/workflows/goreleaser.yml@refs/heads/main' \
      --certificate-oidc-issuer 'https://token.actions.githubusercontent.com' \
      --cert 'https://github.com/charmbracelet/{{.ProjectName}}/releases/download/{{.Version}}/checksums.txt.pem' \
      --signature 'https://github.com/charmbracelet/{{.ProjectName}}/releases/download/{{.Version}}/checksums.txt.sig' \
      ./checksums.txt
    ```

    If the output is `Verified OK`, you can safely use it to verify the checksums of other artifacts you downloaded from the release using `sha256sum`:

    ```bash
    sha256sum --ignore-missing -c checksums.txt
    ```

    Done! You artifacts are now verified!

    </details>



    <a href="https://charm.sh/"><img alt="The Charm logo" src="https://stuff.charm.sh/charm-badge.jpg" width="400"></a>

    Thoughts? Questions? We love hearing from you. Feel free to reach out on [Twitter](https://twitter.com/charmcli), [The Fediverse](https://mastodon.technology/@charm), or on [Discord](https://charm.sh/chat).

# yaml-language-server: $schema=https://goreleaser.com/static/schema-pro.json
