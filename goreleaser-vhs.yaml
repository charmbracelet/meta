# yaml-language-server: $schema=https://goreleaser.com/static/schema-pro.json

version: 2
variables:
  main: ""
  binary_name: ""
  description: ""
  maintainer: ""
  homepage: "https://charm.land/"
  brew_owner: charmbracelet
  docker_io_registry_owner: charmcli
  ghcr_io_registry_owner: charmbracelet
  aur_project_name: ""

includes:
  - from_url:
      url: charmbracelet/meta/main/notarize.yaml

metadata:
  mod_timestamp: "{{ .CommitTimestamp }}"
  license: "MIT"
  homepage: "{{ .Var.homepage }}"
  description: "{{ .Var.description }}"
  maintainers:
    - "{{ .Var.maintainer }}"
  commit_author:
    name: "Charm"
    email: "charmcli@users.noreply.github.com"

before:
  hooks:
    - go mod tidy
    - rm -rf completions
    - mkdir completions
    - rm -rf manpages
    - mkdir manpages
    - sh -c 'go run {{ with .Var.main }}{{ . }}{{ else }}.{{ end }} completion "bash" >./completions/{{ .ProjectName }}.bash'
    - sh -c 'go run {{ with .Var.main }}{{ . }}{{ else }}.{{ end }} completion "zsh" >./completions/{{ .ProjectName }}.zsh'
    - sh -c 'go run {{ with .Var.main }}{{ . }}{{ else }}.{{ end }} completion "fish" >./completions/{{ .ProjectName }}.fish'
    - sh -c 'go run {{ with .Var.main }}{{ . }}{{ else }}.{{ end }} man | gzip -c >./manpages/{{ .ProjectName }}.1.gz'

gomod:
  proxy: true

builds:
  - binary: "{{ with .Var.binary_name }}{{ . }}{{ else }}{{ .ProjectName }}{{ end }}"
    env:
      - CGO_ENABLED=0
    main: "{{ with .Var.main }}{{ . }}{{ else }}.{{ end }}"
    ldflags: -s -w -X main.Version=v{{ .Version }} -X main.CommitSHA={{ .Commit }} -X main.CommitDate={{ .CommitDate }}
    goos:
      - linux
      - darwin
      - windows
    goarch:
      - amd64
      - arm64
      - "386"
      - arm
    goarm:
      - "7"
    ignore:
      - goos: windows
        goarch: arm64
      - goos: windows
        goarm: "7"

archives:
  - format_overrides:
      - goos: windows
        formats: zip
    name_template: >-
      {{ .ProjectName }}_
      {{- .Version }}_
      {{- title .Os }}_
      {{- if eq .Arch "amd64" }}x86_64
      {{- else if eq .Arch "386" }}i386
      {{- else }}{{ .Arch }}{{ end }}
    wrap_in_directory: true
    files:
      - README*
      - LICENSE*
      - manpages/*
      - completions/*

nfpms:
  - vendor: charmbracelet
    file_name_template: "{{ .ConventionalFileName }}"
    formats:
      - apk
      - deb
      - rpm
    contents:
      - src: ./completions/{{ .ProjectName }}.bash
        dst: /etc/bash_completion.d/{{ .ProjectName }}
      - src: ./completions/{{ .ProjectName }}.fish
        dst: /usr/share/fish/vendor_completions.d/{{ .ProjectName }}.fish
      - src: ./completions/{{ .ProjectName }}.zsh
        dst: /usr/share/zsh/site-functions/_{{ .ProjectName }}
      - src: ./manpages/{{ .ProjectName }}.1.gz
        dst: /usr/share/man/man1/{{ .ProjectName }}.1.gz
    dependencies:
      - ffmpeg
      # - ttyd # not available on debian/rhel repositories
    rpm:
      signature:
        key_file: '{{ if ne (index .Env "GPG_KEY_PATH") "" }}{{ .Env.GPG_KEY_PATH }}{{ else }}{{ end }}'
    deb:
      signature:
        key_file: '{{ if ne (index .Env "GPG_KEY_PATH") "" }}{{ .Env.GPG_KEY_PATH }}{{ else }}{{ end }}'

furies:
  - account: "{{ with .Env.FURY_TOKEN }}charmcli{{ else }}{{ end }}"
    secret_name: FURY_TOKEN

brews:
  - repository:
      owner: "{{ .Var.brew_owner }}"
      name: homebrew-tap
      token: "{{ .Env.HOMEBREW_TAP_GITHUB_TOKEN }}"
    dependencies:
      - name: ffmpeg
      - name: ttyd
    install: |-
      bin.install "{{ with .Var.binary_name }}{{ . }}{{ else }}{{ .ProjectName }}{{ end }}"
      bash_completion.install "completions/{{ .ProjectName }}.bash" => "{{ .ProjectName }}"
      zsh_completion.install "completions/{{ .ProjectName }}.zsh" => "_{{ .ProjectName }}"
      fish_completion.install "completions/{{ .ProjectName }}.fish"
      man1.install "manpages/{{ .ProjectName }}.1.gz"

scoops:
  - repository:
      owner: "{{ .Var.brew_owner }}"
      name: scoop-bucket
      token: "{{ .Env.HOMEBREW_TAP_GITHUB_TOKEN }}"

nix:
  - repository:
      owner: "{{ .Var.brew_owner }}"
      token: "{{ .Env.HOMEBREW_TAP_GITHUB_TOKEN }}"
      name: nur
    path: pkgs/{{.ProjectName}}/default.nix
    dependencies:
      - ffmpeg
      - ttyd
      - name: chromium
        os: linux
    extra_install: |-
      installManPage ./manpages/{{.ProjectName}}.1.gz
      installShellCompletion ./completions/*

winget:
  - publisher: charmbracelet
    copyright: Charmbracelet, Inc
    repository:
      owner: "{{ .Var.brew_owner }}"
      token: "{{ .Env.HOMEBREW_TAP_GITHUB_TOKEN }}"
      name: winget-pkgs
      branch: "{{.ProjectName}}-{{.Version}}"
      pull_request:
        enabled: true
        draft: false
        check_boxes: true
        base:
          owner: microsoft
          name: winget-pkgs
          branch: master

aurs:
  - name: "{{ with .Var.aur_project_name }}{{ . }}{{ else }}{{ .ProjectName }}{{ end }}-bin"
    private_key: "{{ .Env.AUR_KEY }}"
    git_url: "ssh://aur@aur.archlinux.org/{{ with .Var.aur_project_name }}{{ . }}{{ else }}{{ .ProjectName }}{{ end }}-bin.git"
    depends:
      - ffmpeg
      - ttyd
    package: |-
      cd "${srcdir}/{{ .ProjectName }}_${pkgver}_Linux_${CARCH}"
      # bin
      install -Dm755 "./{{ .ProjectName }}" "${pkgdir}/usr/bin/{{ .ProjectName }}"
      # license
      mkdir -p "${pkgdir}/usr/share/licenses/{{ .ProjectName }}/"
      install -Dm644 ./LICENSE* "${pkgdir}/usr/share/licenses/{{ .ProjectName }}/"
      # completions
      mkdir -p "${pkgdir}/usr/share/bash-completion/completions/"
      mkdir -p "${pkgdir}/usr/share/zsh/site-functions/"
      mkdir -p "${pkgdir}/usr/share/fish/vendor_completions.d/"
      install -Dm644 "./completions/{{ .ProjectName }}.bash" "${pkgdir}/usr/share/bash-completion/completions/{{ .ProjectName }}"
      install -Dm644 "./completions/{{ .ProjectName }}.zsh" "${pkgdir}/usr/share/zsh/site-functions/_{{ .ProjectName }}"
      install -Dm644 "./completions/{{ .ProjectName }}.fish" "${pkgdir}/usr/share/fish/vendor_completions.d/{{ .ProjectName }}.fish"
      # man pages
      install -Dm644 "./manpages/{{ .ProjectName }}.1.gz" "${pkgdir}/usr/share/man/man1/{{ .ProjectName }}.1.gz"
      # readme
      mkdir -pv "${pkgdir}/usr/share/doc/{{ .ProjectName }}/"
      install -Dm644 README* "${pkgdir}/usr/share/doc/{{ .ProjectName }}/"

checksum:
  name_template: "checksums.txt"

source:
  enabled: true

sboms:
  - artifacts: archive
  - id: source
    artifacts: source

snapshot:
  version_template: "{{ incpatch .Version }}-snapshot"

nightly:
  version_template: "{{ incpatch .Version }}-devel"

changelog:
  sort: asc
  use: github
  filters:
    exclude:
      - "^test:"
      - "^chore"
      - "merge conflict"
      - Merge pull request
      - Merge remote-tracking branch
      - Merge branch
      - go mod tidy
  groups:
    - title: "Deps"
      regexp: "^.*\\(deps\\)*:+.*$"
      order: 300
    - title: "New!"
      regexp: "^.*feat[(\\w)]*:+.*$"
      order: 100
    - title: "Fixed"
      regexp: "^.*fix[(\\w)]*:+.*$"
      order: 200
    - title: "Docs"
      regexp: "^.*docs[(\\w)]*:+.*$"
      order: 400
    - title: "Other stuff"
      order: 9999

signs:
  - cmd: cosign
    certificate: "${artifact}.pem"
    args:
      - sign-blob
      - "--output-certificate=${certificate}"
      - "--output-signature=${signature}"
      - "${artifact}"
      - "--yes"
    artifacts: checksum
    output: true

dockers:
  - image_templates:
      - "{{ if not .IsNightly }}docker.io/{{ .Var.docker_io_registry_owner }}/{{ .ProjectName }}:v{{ .Version }}-amd64{{ end }}"
      - "ghcr.io/{{ .Var.ghcr_io_registry_owner }}/{{ .ProjectName }}:v{{ .Version }}-amd64"
    goarch: amd64
    build_flag_templates:
      - --platform=linux/amd64
      - --label=org.opencontainers.image.title={{ .ProjectName }}
      - --label=org.opencontainers.image.description={{ .Var.description }}
      - --label=org.opencontainers.image.source={{ .GitURL }}
      - --label=org.opencontainers.image.version=v{{ .Version }}
      - --label=org.opencontainers.image.created={{ .Date }}
      - --label=org.opencontainers.image.revision={{ .FullCommit }}
      - --label=org.opencontainers.image.licenses=MIT
    dockerfile: Dockerfile
    use: buildx
  - image_templates:
      - "{{ if not .IsNightly }}docker.io/{{ .Var.docker_io_registry_owner }}/{{ .ProjectName }}:v{{ .Version }}-arm64{{ end }}"
      - "ghcr.io/{{ .Var.ghcr_io_registry_owner }}/{{ .ProjectName }}:v{{ .Version }}-arm64"
    goarch: arm64
    build_flag_templates:
      - --platform=linux/arm64
      - --label=org.opencontainers.image.title={{ .ProjectName }}
      - --label=org.opencontainers.image.description={{ .Var.description }}
      - --label=org.opencontainers.image.source={{ .GitURL }}
      - --label=org.opencontainers.image.version=v{{ .Version }}
      - --label=org.opencontainers.image.created={{ .Date }}
      - --label=org.opencontainers.image.revision={{ .FullCommit }}
      - --label=org.opencontainers.image.licenses=MIT
    dockerfile: Dockerfile
    use: buildx

docker_manifests:
  - name_template: "{{ if not .IsNightly }}docker.io/{{ .Var.docker_io_registry_owner }}/{{ .ProjectName }}:latest{{ end }}"
    image_templates:
      - "docker.io/{{ .Var.docker_io_registry_owner }}/{{ .ProjectName }}:v{{ .Version }}-amd64"
      - "docker.io/{{ .Var.docker_io_registry_owner }}/{{ .ProjectName }}:v{{ .Version }}-arm64"
  - name_template: "{{ if not .IsNightly }}ghcr.io/{{ .Var.ghcr_io_registry_owner }}/{{ .ProjectName }}:latest{{ end }}"
    image_templates:
      - "ghcr.io/{{ .Var.ghcr_io_registry_owner }}/{{ .ProjectName }}:v{{ .Version }}-amd64"
      - "ghcr.io/{{ .Var.ghcr_io_registry_owner }}/{{ .ProjectName }}:v{{ .Version }}-arm64"
  - name_template: "{{ if not .IsNightly }}docker.io/{{ .Var.docker_io_registry_owner }}/{{ .ProjectName }}:v{{ .Major }}.{{ .Minor }}{{ end }}"
    image_templates:
      - "docker.io/{{ .Var.docker_io_registry_owner }}/{{ .ProjectName }}:v{{ .Version }}-amd64"
      - "docker.io/{{ .Var.docker_io_registry_owner }}/{{ .ProjectName }}:v{{ .Version }}-arm64"
  - name_template: "{{ if not .IsNightly }}ghcr.io/{{ .Var.ghcr_io_registry_owner }}/{{ .ProjectName }}:v{{ .Major }}.{{ .Minor }}{{ end }}"
    image_templates:
      - "ghcr.io/{{ .Var.ghcr_io_registry_owner }}/{{ .ProjectName }}:v{{ .Version }}-amd64"
      - "ghcr.io/{{ .Var.ghcr_io_registry_owner }}/{{ .ProjectName }}:v{{ .Version }}-arm64"
  - name_template: "{{ if not .IsNightly }}docker.io/{{ .Var.docker_io_registry_owner }}/{{ .ProjectName }}:v{{ .Version }}{{ end }}"
    image_templates:
      - "docker.io/{{ .Var.docker_io_registry_owner }}/{{ .ProjectName }}:v{{ .Version }}-amd64"
      - "docker.io/{{ .Var.docker_io_registry_owner }}/{{ .ProjectName }}:v{{ .Version }}-arm64"
  - name_template: "ghcr.io/{{ .Var.ghcr_io_registry_owner }}/{{ .ProjectName }}:v{{ .Version }}"
    image_templates:
      - "ghcr.io/{{ .Var.ghcr_io_registry_owner }}/{{ .ProjectName }}:v{{ .Version }}-amd64"
      - "ghcr.io/{{ .Var.ghcr_io_registry_owner }}/{{ .ProjectName }}:v{{ .Version }}-arm64"

docker_signs:
  - cmd: cosign
    artifacts: manifests
    output: true
    args:
      - "sign"
      - "${artifact}"
      - "--yes"

git:
  tag_sort: semver

release:
  prerelease: auto
  footer:
    from_url:
      url: https://raw.githubusercontent.com/charmbracelet/meta/main/footer.md
