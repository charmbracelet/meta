name: nightly

on:
  workflow_call:
    secrets:
      docker_username:
        required: true
      docker_token:
        required: true
      goreleaser_key:
        required: true

jobs:
  nightly:
    runs-on: ubuntu-latest
    permissions:
      contents: write
      id-token: write
      packages: write
    env:
      DOCKER_CLI_EXPERIMENTAL: enabled
    steps:
    - uses: actions/checkout@v2
      with:
        fetch-depth: 0
    - uses: actions/setup-go@v2
      with:
        go-version: 1.17
    - uses: actions/cache@v2
      with:
        path: ~/go/pkg/mod
        key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
        restore-keys: |
          ${{ runner.os }}-go-
    - uses: sigstore/cosign-installer@v1.4.1
    - uses: anchore/sbom-action/download-syft@v0.6.0
    - uses: docker/setup-qemu-action@v1
    - uses: docker/setup-buildx-action@v1
    - uses: docker/login-action@v1
      with:
        registry: ghcr.io
        username: ${{ github.repository_owner }}
        password: ${{ secrets.GITHUB_TOKEN }}
    - uses: docker/login-action@v1
      with:
        username: ${{ secrets.docker_username }}
        password: ${{ secrets.docker_token }}
    - uses: goreleaser/goreleaser-action@v2
      with:
        version: latest
        distribution: goreleaser-pro
        args: release --rm-dist --nightly
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        GORELEASER_KEY: ${{ secrets.goreleaser_key }}

    - uses: actions/upload-artifact@v2
      with:
        name: Linux (x86_64)
        path: |
          dist/*_linux_amd64/*
          LICENSE
          README.md

    - uses: actions/upload-artifact@v2
      with:
        name: Linux (arm64)
        path: |
          dist/*_linux_arm64/*
          LICENSE
          README.md

    - uses: actions/upload-artifact@v2
      with:
        name: MacOS (x86_64)
        path: |
          dist/*_darwin_amd64/*
          LICENSE
          README.md

    - uses: actions/upload-artifact@v2
      with:
        name: MacOS (arm64)
        path: |
          dist/*_darwin_arm64/*
          LICENSE
          README.md

    - uses: actions/upload-artifact@v2
      with:
        name: Windows (x86_64)
        path: |
          dist/*_windows_amd64/*
          LICENSE
          README.md

    - uses: actions/github-script@v5
      with:
        # This snippet is public-domain, taken from
        # https://github.com/oprypin/nightly.link/blob/master/.github/workflows/pr-comment.yml
        script: |
          async function upsertComment(owner, repo, issue_number, purpose, body) {
            const {data: comments} = await github.rest.issues.listComments(
              {owner, repo, issue_number});

            const marker = `<!-- bot: ${purpose} -->`;
            body = marker + "\n" + body;

            const existing = comments.filter((c) => c.body.includes(marker));
            if (existing.length > 0) {
              const last = existing[existing.length - 1];
              core.info(`Updating comment ${last.id}`);
              await github.rest.issues.updateComment({
                owner, repo,
                body,
                comment_id: last.id,
              });
            } else {
              core.info(`Creating a comment in issue / PR #${issue_number}`);
              await github.rest.issues.createComment({issue_number, body, owner, repo});
            }
          }

          const {owner, repo} = context.repo;
          const run_id = ${{github.event.workflow_run.id}};

          const pull_requests = ${{ toJSON(github.event.workflow_run.pull_requests) }};
          if (!pull_requests.length) {
            return core.error("This workflow doesn't match any pull requests!");
          }

          const artifacts = await github.paginate(
            github.rest.actions.listWorkflowRunArtifacts, {owner, repo, run_id});
          if (!artifacts.length) {
            return core.error(`No artifacts found`);
          }
          const sha = "${{github.event.workflow_run.head_sha}}";
          let body = `Download the artifacts for this pull request:\n`;
          for (const art of artifacts) {
            body += `\n* [${art.name}.zip](https://nightly.link/${owner}/${repo}/actions/artifacts/${art.id}.zip)`;
          }
          body += `\n\nOr use the following Docker image \`ghcr.io/${owner}/${repo}:devel-${sha.substr(0,7)}\``;

          core.info("Review thread message body:", body);

          for (const pr of pull_requests) {
            await upsertComment(owner, repo, pr.number,
              "nightly-link", body);
          }
